name: Deploy to GitHub Pages

on:
  push:
    branches: [main, dev, test]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment per branch
concurrency:
  group: "pages-${{ github.ref_name }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set branch-specific environment variables
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "NEXT_PUBLIC_BASE_PATH=/mita-state-self-assessment-tool" >> $GITHUB_ENV
            echo "OUTPUT_DIR=out" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" = "dev" ]; then
            echo "NEXT_PUBLIC_BASE_PATH=/mita-state-self-assessment-tool/dev" >> $GITHUB_ENV
            echo "OUTPUT_DIR=out/dev" >> $GITHUB_ENV
            # Create dev directory
            mkdir -p out/dev
          elif [ "$BRANCH_NAME" = "test" ]; then
            echo "NEXT_PUBLIC_BASE_PATH=/mita-state-self-assessment-tool/test" >> $GITHUB_ENV
            echo "OUTPUT_DIR=out/test" >> $GITHUB_ENV
            # Create test directory
            mkdir -p out/test
          fi

      - name: Build and Export
        run: |
          npm run build
          
          # Handle branch-specific output
          if [ "$BRANCH_NAME" = "main" ]; then
            touch out/.nojekyll
          elif [ "$BRANCH_NAME" = "dev" ]; then
            # Move files to dev subdirectory
            cp -r out/* out/dev/
            # Remove files from root that were copied to dev
            find out -maxdepth 1 -type f -exec rm {} \;
            find out -maxdepth 1 -type d -not -name dev -not -name test -not -name "." -not -name ".." -exec rm -rf {} \;
            touch out/.nojekyll
          elif [ "$BRANCH_NAME" = "test" ]; then
            # Move files to test subdirectory
            cp -r out/* out/test/
            # Remove files from root that were copied to test
            find out -maxdepth 1 -type f -exec rm {} \;
            find out -maxdepth 1 -type d -not -name dev -not -name test -not -name "." -not -name ".." -exec rm -rf {} \;
            touch out/.nojekyll
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages