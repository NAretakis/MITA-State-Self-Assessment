name: Deploy to GitHub Pages

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Setup caching for Next.js builds
      - name: Setup Next.js caching
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: npm ci

      - name: Add ESLint config to disable rules
        run: |
          echo '{
            "extends": "next/core-web-vitals",
            "rules": {
              "@typescript-eslint/no-unused-vars": "off",
              "import/no-anonymous-default-export": "off"
            }
          }' > .eslintrc.json

      - name: Set branch name
        id: branch_name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Configure base path for main branch
        if: ${{ env.BRANCH_NAME == 'main' }}
        run: |
          echo "Configuring for main branch"
          sed -i "s|basePath: '',|basePath: '/mita-state-self-assessment-tool',|g" next.config.js
          sed -i "s|assetPrefix: process.env.NODE_ENV === 'production' ? '' : '',|assetPrefix: process.env.NODE_ENV === 'production' ? '/mita-state-self-assessment-tool' : '',|g" next.config.js

      - name: Configure base path for non-main branches
        if: ${{ env.BRANCH_NAME != 'main' }}
        run: |
          echo "Configuring for branch: ${{ env.BRANCH_NAME }}"
          sed -i "s|basePath: '',|basePath: '/mita-state-self-assessment-tool/${{ env.BRANCH_NAME }}',|g" next.config.js
          sed -i "s|assetPrefix: process.env.NODE_ENV === 'production' ? '' : '',|assetPrefix: process.env.NODE_ENV === 'production' ? '/mita-state-self-assessment-tool/${{ env.BRANCH_NAME }}' : '',|g" next.config.js

      - name: Set NODE_ENV to production
        run: echo "NODE_ENV=production" >> $GITHUB_ENV

      # Build with proper caching
      - name: Build
        run: npm run build
        env:
          NODE_ENV: production

      - name: Move branch build to correct directory and fix asset paths
        if: ${{ env.BRANCH_NAME != 'main' }}
        run: |
          # Create branch directory
          mkdir -p out/${{ env.BRANCH_NAME }}
          
          # Copy all files from out/ to out/branch-name/
          # Exclude the branch directory itself to avoid recursion
          find out -mindepth 1 -maxdepth 1 -not -name "${{ env.BRANCH_NAME }}" -exec cp -r {} out/${{ env.BRANCH_NAME }}/ \;
          
          # Fix asset paths in HTML files
          find out/${{ env.BRANCH_NAME }} -name "*.html" -exec sed -i 's|href="/_next/|href="/mita-state-self-assessment-tool/${{ env.BRANCH_NAME }}/_next/|g' {} \;
          find out/${{ env.BRANCH_NAME }} -name "*.html" -exec sed -i 's|src="/_next/|src="/mita-state-self-assessment-tool/${{ env.BRANCH_NAME }}/_next/|g' {} \;
          
          # Remove the original files that were copied (except the branch directory)
          find out -mindepth 1 -maxdepth 1 -not -name "${{ env.BRANCH_NAME }}" -exec rm -rf {} \;

      # Add browser caching headers via _headers file
      - name: Create caching headers
        run: |
          cat > out/_headers << 'EOL'
          # Cache static assets for 1 year
          /_next/static/*
            Cache-Control: public, max-age=31536000, immutable
          
          # Cache images for 1 week
          /_next/image/*
            Cache-Control: public, max-age=604800
          
          # Cache fonts for 1 month
          /_next/static/media/*
            Cache-Control: public, max-age=2592000, immutable
          
          # Cache page data for 10 minutes
          /_next/data/*
            Cache-Control: public, max-age=600
          EOL

      - name: Create 404.html for redirects and add CSS fix
        run: |
          cat > out/404.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Redirecting...</title>
            <script>
              (function() {
                const path = window.location.pathname;
                const repoName = 'mita-state-self-assessment-tool';
                const redirectKey = 'mita_redirect_path';
                const redirectCount = parseInt(sessionStorage.getItem('mita_redirect_count') || '0');
                
                // Stop after 3 redirects to prevent infinite loops
                if (redirectCount > 3) {
                  document.body.innerHTML = '<p>Too many redirects. Please go to the <a href="/">home page</a>.</p>';
                  return;
                }
                
                // Check if we've already tried to redirect this path
                if (sessionStorage.getItem(redirectKey) === path) {
                  document.body.innerHTML = '<p>Page not found. Please go to the <a href="/">home page</a>.</p>';
                  return;
                }
                
                // Simple check for root paths
                if (path === `/${repoName}/` || path === `/${repoName}` || path.endsWith('index.html')) {
                  document.body.innerHTML = '<p>Page not found. Please go to the <a href="/">home page</a>.</p>';
                  return;
                }
                
                const repoIndex = path.indexOf(repoName);
                if (repoIndex !== -1) {
                  const pathAfterRepo = path.substring(repoIndex + repoName.length);
                  const segments = pathAfterRepo.split('/').filter(Boolean);
                  
                  // Track this redirect attempt
                  sessionStorage.setItem(redirectKey, path);
                  sessionStorage.setItem('mita_redirect_count', (redirectCount + 1).toString());
                  
                  if (segments.length > 0) {
                    // Branch deployment
                    window.location.href = `/${repoName}/${segments[0]}/`;
                  } else {
                    // Main deployment
                    window.location.href = `/${repoName}/`;
                  }
                } else {
                  window.location.href = '/';
                }
              })();
            </script>
          </head>
          <body>
            <p>Redirecting to the application...</p>
          </body>
          </html>
          EOL
          
          # Create a script to fix CSS paths at runtime
          cat > out/fix-paths.js << 'EOL'
          // This script fixes paths for CSS and other assets at runtime
          (function() {
            const repoName = 'mita-state-self-assessment-tool';
            const path = window.location.pathname;
            const repoIndex = path.indexOf(repoName);
            
            if (repoIndex !== -1) {
              const pathAfterRepo = path.substring(repoIndex + repoName.length);
              const segments = pathAfterRepo.split('/').filter(Boolean);
              
              // If this is a branch deployment
              if (segments.length > 0) {
                const branchName = segments[0];
                const basePath = `/${repoName}/${branchName}`;
                
                // Fix CSS links that might be using incorrect paths
                document.querySelectorAll('link[rel="stylesheet"]').forEach(link => {
                  if (link.href.includes('/_next/') && !link.href.includes(basePath)) {
                    link.href = link.href.replace('/_next/', `${basePath}/_next/`);
                  }
                });
                
                // Fix script sources
                document.querySelectorAll('script').forEach(script => {
                  if (script.src && script.src.includes('/_next/') && !script.src.includes(basePath)) {
                    script.src = script.src.replace('/_next/', `${basePath}/_next/`);
                  }
                });
              }
            }
          })();
          EOL
          
          # Add the fix-paths script to all HTML files
          find out -name "*.html" -exec sed -i 's|</head>|<script src="/fix-paths.js"></script></head>|g' {} \;

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: out
          branch: gh-pages
          clean: true
          clean-exclude: |
            main/**
            ${{ env.BRANCH_NAME }}/**
            
      - name: Output Deployment URL
        run: |
          if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
            echo "::notice::ðŸš€ Deployed to: https://$(echo ${{ github.repository_owner }}).github.io/$(echo ${{ github.event.repository.name }})"
          else
            echo "::notice::ðŸš€ Deployed to: https://$(echo ${{ github.repository_owner }}).github.io/$(echo ${{ github.event.repository.name }})/${{ env.BRANCH_NAME }}"
          fi