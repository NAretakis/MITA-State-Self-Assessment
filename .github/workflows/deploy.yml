name: Deploy to GitHub Pages

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Add ESLint config to disable rules
        run: |
          echo '{
            "extends": "next/core-web-vitals",
            "rules": {
              "@typescript-eslint/no-unused-vars": "off",
              "import/no-anonymous-default-export": "off"
            }
          }' > .eslintrc.json

      - name: Set branch name
        id: branch_name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Configure base path for non-main branches
        if: ${{ env.BRANCH_NAME != 'main' }}
        run: |
          echo "Configuring for branch: ${{ env.BRANCH_NAME }}"
          sed -i "s|basePath: '',|basePath: '/${{ env.BRANCH_NAME }}',|g" next.config.js

      - name: Build
        run: npm run build

      - name: Debug output directory structure before moving
        run: |
          echo "Output directory structure before moving:"
          ls -la out/

      - name: Move branch build to correct directory
        if: ${{ env.BRANCH_NAME != 'main' }}
        run: |
          # Create branch directory
          mkdir -p out/${{ env.BRANCH_NAME }}
          
          # Copy all files from out/ to out/branch-name/
          # Exclude the branch directory itself to avoid recursion
          find out -mindepth 1 -maxdepth 1 -not -name "${{ env.BRANCH_NAME }}" -exec cp -r {} out/${{ env.BRANCH_NAME }}/ \;
          
          # Remove the original files that were copied (except the branch directory)
          find out -mindepth 1 -maxdepth 1 -not -name "${{ env.BRANCH_NAME }}" -exec rm -rf {} \;

      - name: Debug output directory structure after moving
        if: ${{ env.BRANCH_NAME != 'main' }}
        run: |
          echo "Output directory structure after moving:"
          ls -la out/
          echo "Branch directory structure:"
          ls -la out/${{ env.BRANCH_NAME }}/

      - name: Create 404.html for redirects
        run: |
          cat > out/404.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Redirecting...</title>
            <script>
              // Extract the path from the current URL
              const path = window.location.pathname;
              const repoName = 'mita-state-self-assessment-tool';
              
              // Find the repository name in the path
              const repoIndex = path.indexOf(repoName);
              
              if (repoIndex !== -1) {
                // Get everything after the repo name
                const pathAfterRepo = path.substring(repoIndex + repoName.length);
                
                // Check if this is a branch path
                const segments = pathAfterRepo.split('/').filter(Boolean);
                if (segments.length > 0) {
                  const branchName = segments[0];
                  // Redirect to the branch index
                  window.location.href = `/${repoName}/${branchName}/index.html`;
                } else {
                  // Redirect to main index
                  window.location.href = `/${repoName}/index.html`;
                }
              } else {
                // Fallback to root
                window.location.href = '/';
              }
            </script>
          </head>
          <body>
            <p>Redirecting to the application...</p>
          </body>
          </html>
          EOL

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: out
          branch: gh-pages
          clean: true
          clean-exclude: |
            staging/**
            preview/**
            
      - name: Output Deployment URL
        run: |
          if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
            echo "::notice::ðŸš€ Deployed to: https://$(echo ${{ github.repository_owner }}).github.io/$(echo ${{ github.event.repository.name }})"
          else
            echo "::notice::ðŸš€ Deployed to: https://$(echo ${{ github.repository_owner }}).github.io/$(echo ${{ github.event.repository.name }})/${{ env.BRANCH_NAME }}"
          fi